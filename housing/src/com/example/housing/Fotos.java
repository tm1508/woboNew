package com.example.housing;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Iterator;
import java.util.List;

import javax.imageio.ImageIO;

import com.example.housing.data.model.Offer;
import com.example.housing.data.model.Photo;
import com.example.housing.data.provider.OfferProvider;
import com.example.housing.data.provider.PhotoProvider;
import com.example.housing.utility.Format;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.event.LayoutEvents.LayoutClickEvent;
import com.vaadin.event.LayoutEvents.LayoutClickListener;
import com.vaadin.navigator.View;
import com.vaadin.server.FileResource;
import com.vaadin.server.Page;
import com.vaadin.server.StreamResource;
import com.vaadin.server.VaadinService;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Image;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Upload;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.Upload.Receiver;
import com.vaadin.ui.Upload.SucceededEvent;
import com.vaadin.ui.Upload.SucceededListener;

// TODO: Auto-generated Javadoc
/**
 * The Class Listenzeile.
 */
public class Fotos extends CustomComponent implements Receiver, SucceededListener{
	private static final long serialVersionUID = 1L;
	/** The main layout. */
	@AutoGenerated
	private VerticalLayout mainLayout;
	private Offer o;
	private ByteArrayOutputStream tmpImg;
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 *
	 * @param o the o
	 */
	public Fotos(final Offer o, final AngebotErstellen angebotErstellen) {
		this.o = o;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		Label title = new Label("Bilder zu diesem Angebot bearbeiten");
		title.addStyleName("title");
		mainLayout.addComponent(title);
		
		
		//Bilder
		Label bilder = new Label("Bilder hinzufügen");
		bilder.addStyleName("AbschnittLabel");

		Upload bilderup = new Upload("Fotos hochladen (max. 5 Fotos pro Angebot):", angebotErstellen);
		bilderup.addSucceededListener(angebotErstellen);
				
		mainLayout.addComponent(bilder);
		//content.addComponent(new Label());
		mainLayout.addComponent(bilderup);
		mainLayout.addComponent(new Label());		
		
		//Bilder Löschen
		Label bilderLoeschen = new Label("Aktuelle Bilder");
		bilderLoeschen.addStyleName("AbschnittLabel");
		
		try{
			mainLayout.addComponent(bilderLoeschen);
			List<Photo> photo = o.getPhotos();
			Iterator<Photo> it = photo.iterator();
			if(!it.hasNext()){
				mainLayout.addComponent(new Label("Es wurden noch keine Bilder zu diesem Angebot hochgeladen."));
			}else{
				while(it.hasNext()){
					Fotozeile f = new Fotozeile(it.next(), o);
					mainLayout.addComponent(f);
				}
			}
			mainLayout.addComponent(new Label());	

		}catch(Exception e){
			mainLayout.addComponent(new Label("Es wurden noch keine Bilder zu diesem Angebot hochgeladen."));
		}
		



	}
	
	
	@Override
	public OutputStream receiveUpload(String filename, String mimeType) {
		
		try {
			
			if (mimeType.contains("image")) {
				
				tmpImg = new ByteArrayOutputStream();
				return tmpImg;
				
			} else {
				
				Notification failFileFormat = new Notification("Bitte laden Sie eine Bilddatei hoch!", Type.HUMANIZED_MESSAGE);
				failFileFormat.setStyleName("failure");
				failFileFormat.setDelayMsec(300);
				failFileFormat.show(Page.getCurrent());
				return null;
				
			}
			
		} catch (Exception e) {
			
			e.printStackTrace();
			return null;
			
		}
	}

	@Override
	public void uploadSucceeded(SucceededEvent event) {
		
		OfferProvider offerProv = new OfferProvider();

		if(offerProv.findById(o.getIdOffer()).getPhotos() == null || offerProv.findById(o.getIdOffer()).getPhotos().size() < 5 ) {
		
			if (tmpImg != null) { // ist null, wenn kein Bild-Dateiformat hochgeladen wurde (siehe Methode receiveUpload)
				
				byte[] tmpImgBytes = tmpImg.toByteArray();
				
				//Größe prüfen
				if(tmpImgBytes.length > 1050000){
					
					Notification failFileSize = new Notification("Bitte laden Sie eine kleinere Bilddatei hoch (max. 1MB)!", Type.HUMANIZED_MESSAGE);
					failFileSize.setStyleName("failure");
					failFileSize.setDelayMsec(300);
					failFileSize.show(Page.getCurrent());
					return;
					
				}
				
				Photo newPhoto = new Photo();
				newPhoto.setPhoto_idOffer(o);
				newPhoto.setPicture(tmpImgBytes);
				
	
				
				new PhotoProvider().addPhoto(newPhoto);
				
				Notification not = new Notification("Bild wurde erfolgreich hochgeladen!", Type.HUMANIZED_MESSAGE);
				not.setStyleName("success");
				not.setDelayMsec(300);
				not.show(Page.getCurrent());
				
				//TODO
				this.markAsDirty();

		    }
			
		} else {
			
			Notification not = new Notification("Sie haben bereits fünf Bilder zu diesem Angebot hochgeladen.",Type.HUMANIZED_MESSAGE);//Meldung an den Nutzer
			not.setDelayMsec(300);
			not.setStyleName("failure");
			not.show(Page.getCurrent());
			
		} 
			
	}

	/**
	 * Builds the main layout.
	 *
	 * @return the vertical layout
	 */
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// the main layout and components will be created here
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);

		mainLayout.setMargin(false);

		return mainLayout;

	}

}
